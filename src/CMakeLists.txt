cmake_minimum_required (VERSION 2.6) 
project (NEEXEE)
IF (UNIX)
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -std=c++0x -DDEBUG=3 -lpthread")
    SET (CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--as-needed")
    SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--as-needed")
    IF (EXTRA_WARNINGS)
        SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall  -Wextra")
    ENDIF (EXTRA_WARNINGS)
    IF (USE_PIPE)
        SET (CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -pipe")
    ENDIF (USE_PIPE)
ENDIF (UNIX)

OPTION (WITH_PLUGINS "Build a somewhat standard set of plugins as well" ON)
OPTION (ENABLE_KOKO "Build koko module, which koko on lisp, haskell, etc." ${WITH_PLUGINS} )
OPTION (ENABLE_HELP "Build help module." ${WITH_PLUGINS})
OPTION (ENABLE_HISTORY "Build logger, which scan logs" ${WITH_PLUGINS})
OPTION (ENABLE_SMART "Build Turing test module" ${WITH_PLUGINS})
OPTION (ENABLE_WHO "Build module which allows to see room vCards" ${WITH_PLUGINS})

add_subdirectory (bot)
add_subdirectory (settings)
add_subdirectory (debug)
add_subdirectory (moduleexecutor)
add_subdirectory (tools)
add_subdirectory (console)
add_subdirectory (module)
add_executable (neexee main.cpp)
target_link_libraries (neexee bot settings)
find_library (gloox REQUIRED)
if (GLOOX_FOUND)
  message(STATUS "gloox library found " ${GLOOX_INCLUDE_DIRS})
  include_directories(${GLOOX_INCLUDE_DIRS})
  target_link_libraries (bot ${GLOOX_LIBRARIES})
endif (GLOOX_FOUND)
find_library(pthread REQUIRED)
if(PTHREAD_FOUND)
  include_directories(${PTHREAD_INCLUDE_DIRS})
  target_link_libraries(moduleexecutor ${PTHREAD_INCLUDE_DIRS})
endif (PTHREAD_FOUND)
